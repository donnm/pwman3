{"name":"Pwman3","tagline":"Console based password management application","body":"# PWMAN3 \r\n\r\n[![Build Status](https://travis-ci.org/pwman3/pwman3.png?branch=master)](https://travis-ci.org/pwman3/pwman3)\r\n[![Coverage Status](https://coveralls.io/repos/pwman3/pwman3/badge.png)](https://coveralls.io/r/pwman3/pwman3?branch=master)\r\n\r\nA nice command line password manager, which is smart enough to use different SQL Databases (MySQL, SQLite, PostgreSQL).  \r\nPwman3 can also copy passwords to the clipboard (on Mac and Linux) without exposing them, so you save\r\nsome typing. \r\nBesides managing and storing passwords, Pwman3 can also generate passwords using different algorithms. \r\n\r\n## Nice Features in pwman3:\r\n\r\n * copying of passwords to clipboard\r\n * launching specific uri's with default browser\r\n * password generators\r\n * not really a user oriented feature. However, it guarantees the elimination of silly \r\n   bugs: pwman3 is test driven! \r\n\r\n## A very important note about security\r\n\r\n   If you are a concerned about security, please note:\r\n   PWMAN3 is a very very basic software, which was designed to be used in a safe environment. \r\n   - If you are afraid that PWMAN3 is to weak for your needs ... and you still want to try it, here\r\n     are a few recommendations:\r\n     1. Use the AES encryption, it is supposed to be better than Blowfish. \r\n     2. Don't store your Password Database in the Obvious place, and if your extremely paranoind\r\n        store it completely away from your computer on a separate USB key. \r\n     3. Use a HARD to crack password to encrypt your database!\r\n   - If you care, report bugs, and send patches. \r\n   - I would realy like you to use PWMAN3, so I could get feedback and more ideas, especially, if you\r\n   know something about security (which is probably more than I know at the moment. \r\n   - Be patient, I am working on PWMAN on my free time, and for fun, so don't expect PWMAN3 to \r\n     do to more than storing your passwords. \r\n   \r\n## Installing \r\n\r\nPwman3 requires the following debian packages:\r\n \r\n python-colorama\r\n python-crypto \r\n xsel - to copy password to clipboard on Linux\r\n    \r\nPwman only supports Python 2.7. \r\n\r\nTo install from source:\r\n\r\n    $ python setup.py install\r\n\r\nYou can also install PWMAN3 using python pip:\r\n\r\n    $ pip install pwman3\r\n\r\n### Windows Users:\r\n\r\nBefore installing pwman3 you need to install PyCrypto. To you can install PyCrypto with:\r\n\r\n    python setup install_pycrypto\r\n\r\nWhen done, issue:\r\n    \r\n    python setup install\r\n\r\nIf you are more picky than than than you can compile PyCrypto using the instruction bellow.\r\n\r\nAfter you downloaded the source code of \r\npycrypto and extracted it do the following inisde the source code direcotry:\r\n\r\n    C:\\Temp\\pycrypto> python setup.py build -c mingw32 \r\n    C:\\Temp\\pycrypto> python setup.py bdist_wininst\r\n\r\nNow you should be able to run pwman3 on Windows.\r\n\r\nOn Windows 7 64bit: \r\n\r\nPyCrypto builds with mingw gcc version 4.6.2. Note that you also need msys installed from mingw. \r\nThe above setup commands won't work in the Windows command prompt. But they do work in \r\nthe msys command prompt. \r\nYou also need to edit the following file:\r\n\r\n\tC:\\Python27\\Lib\\distutils\\cygwinccompiler.py\r\n\r\nBefore doing anything on this file make sure you create a backup! After that remove all references\r\nfor ``-mno-cygwin`. \r\n\r\nand after all that, if you a security minded person, who is capable of using a command line password:\r\nDo your self a favor and skip Windows. Try Linux\\BSD\\*Nix OS. \r\n\r\n## User Interface\r\n   1. When xsel is install on a Linux system, you can copy passwords directly to clipboard with the copy command.\r\n   2. The command 'open' will open the default browser if URL is specified.\r\n   3. An automatic 'clear screen' function is called after printing an entry in the database. \r\n      The screen will be cleared after 5 seconds by default. However, this can be changed by changing the \r\n      correct value in `~.pwman/config`:\r\n      \r\n      ```\r\n      [Global]\r\n      ...\r\n      cls_timeout = 10\r\n      ```\r\n      To disable the automatic 'clear screen' functionality set `cls_timeout` to a negative integer. \r\n\r\n      ```\r\n      [Global]\r\n      ...\r\n      cls_timeout = -1\r\n      ```\r\n\r\n\r\n## ikegam's function \r\n\r\n * making a password from the numeric character and the alphabet character ([A-Za-z0-9]).\r\n\r\n   You can add a parameter for making the password to the config(~/.pwman/config).\r\n\r\n   For Example:\r\n     \r\n     ```\r\n     [Generator]\r\n     numerics = true\r\n     ```\r\n\r\n * Passwords can be l33tified similarly using the following.\r\n     \r\n     ```\r\n     [Generator]\r\n     leetify = true\r\n     ```\r\n * Passwords can contain one of the following special signs:\r\n    \r\n    ```\r\n    specialsigns = [\"@\", \"#\", \"?\", \"!\", '\\\\', \"|\", \"$\",\r\n                     \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \":\", \";\",\r\n                     \"{\", \"}\", \"+\",\"-\"]\r\n    ```\r\nThe config file  must have the following option:\r\n    \r\n    ```\r\n    [Generator]\r\n    special_signs = true\r\n    ```\r\n\r\n * Individual password policy can be chosen with:\r\n \r\n     ```\r\n     Pwman3 0.2.1 (c) visit: http://github.com/pwman3/pwman3\r\n     pwman> n {'leetify':False, 'numerics':True, 'special_signs':True}\r\n     Username: username\r\n     Password length (default 7): 7\r\n     New password: Q1dab@7\r\n     ``` \r\n   \r\n * Copying password to X11 or Mac clip board:\r\n  - On Mac OSX systems copying utilizes `pbcopy`  \r\n  - On X11 Systems  Specify the path to `xsel` if you already have `~/.pwman/config` \r\n      \r\n     ```\r\n     [Global]\r\n     xsel = yes\r\n      xselpath = /usr/bin/xsel\r\n     ```\r\n \r\n     When launching `pwman` for the first time, it will try and look for \r\n     `xsel` and write the configuration properly. \r\n\r\n## Password leetifying\r\n\r\nIf you choose to leetify your passwords when generating passwords, \r\ne.g. `leetify = true` in `~/.pwman/config`, password lengths may exceed the length chosen. \r\nThis is because certain letters will be replaced with 2 or more characters. \r\nThat is, if an initial random password was generated as : `Murkahm1` it will eventually be\r\nset to: `|\\/|ur|<ham1`. To see to full leet list checkout line 79 in `pwman/util/generator.py`\r\nor issue in your terminal: \r\n\r\n     python -c'from pwman.util import generator; print generator.leetlist'\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}